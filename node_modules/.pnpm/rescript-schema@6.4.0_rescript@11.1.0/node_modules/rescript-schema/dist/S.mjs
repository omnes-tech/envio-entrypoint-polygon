import * as S from './../src/S_Core.bs.mjs';

const Error = S.$$Error.$$class;
const string = S.string;
const boolean = S.bool;
const integer = S.$$int;
const number = S.$$float;
const json = S.json;
const never = S.never;
const unknown = S.unknown;
const undefined$1 = S.unit;
const optional = S.js_optional;
const nullable = S.$$null;
const nullish = S.nullable;
const array = S.array;
const record = S.dict;
const jsonString = S.jsonString;
const union = S.union;
const object = S.js_object;
const schema = S.schema;
const merge = S.js_merge;
const Object$1 = S.$$Object;
const String = S.$$String;
const Number = S.Float;
const Array = S.$$Array;
const custom = S.js_custom;
const literal = S.literal;
const tuple = S.js_tuple;
const asyncParserRefine = S.js_asyncParserRefine;
const refine = S.js_refine;
const transform = S.js_transform;
const description = S.description;
const describe = S.describe;
const parse = S.js_parse;
const parseOrThrow = S.js_parseOrThrow;
const parseAsync = S.js_parseAsync;
const serialize = S.js_serialize;
const serializeOrThrow = S.js_serializeOrThrow;
const name = S.js_name;
const setName = S.setName;

export { Array, Error, Number, Object$1 as Object, String, array, asyncParserRefine, boolean, custom, describe, description, integer, json, jsonString, literal, merge, name, never, nullable, nullish, number, object, optional, parse, parseAsync, parseOrThrow, record, refine, schema, serialize, serializeOrThrow, setName, string, transform, tuple, undefined$1 as undefined, union, unknown };
